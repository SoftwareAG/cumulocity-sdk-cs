pipeline {
    agent {
        kubernetes {
            inheritFrom 'mono3'
            defaultContainer 'default'
        }
    }
    triggers{
        bitbucketPush()
    }
    options{
     buildDiscarder(logRotator(numToKeepStr: '10'))
     timeout(time: 1, unit: 'HOURS')
     disableConcurrentBuilds()
    }
	parameters {
        booleanParam(defaultValue: true, description: '', name: 'DIAGNOSTIC_FLAG')
		booleanParam(defaultValue: false, description: '', name: 'CAN_RELEASE')
    }
    environment {
        CI = 'true'
        DIAGNOSTIC_FLAG_ENV = "${params.DIAGNOSTIC_FLAG ? '-verbosity=diagnostic' : ''}"
    }
    stages {
        stage('Build') {
		    when {
                anyOf{
                    branch 'master'
                    branch 'develop'
                    branch 'feature/**'
                }
            }
            steps {
			    container('default') {
                    script {
                        echo "diagnostic flag: ${params.DIAGNOSTIC_FLAG}"
                        sh ''' 
                        rm /var/lib/dpkg/statoverride &&apt-get install -y dos2unix
                        dos2unix ./MQTT-SDK/build.sh && apt-get --purge remove -y dos2unix 
                        rm -rf "/var/lib/apt/lists/*"
                        cd MQTT-SDK && chmod +x ./build.sh && ./build.sh -target=Test  ${DIAGNOSTIC_FLAG_ENV} && cd .. 
                        '''
                        }
                    }
                }
            } 
        stage('Release') {
            when {
                anyOf{    
                    branch 'develop'
                    branch "release/*"
                }
            }
            steps {
                container('default') {    
                    script {   
                            echo "CAN_RELEASE: ${params.CAN_RELEASE}"    
                            echo "diagnostic flag: ${params.DIAGNOSTIC_FLAG}"    
                        if ("${params.CAN_RELEASE}" == "true") {
                            sshagent (['jenkins-master']) {
                                sh '''#!/bin/bash
                                    cd MQTT-SDK && chmod +x ./build.sh && ./build.sh --script build-release.cake ${DIAGNOSTIC_FLAG_ENV}
                                    '''
                                }    
                            }
                        }
                    }
                }
            }	
    }

	post { 
		success{
            withCredentials([usernamePassword(credentialsId: 'bitbucket-m2m', passwordVariable: 'BITBUCKET_PASSWORD', usernameVariable: 'BITBUCKET_USER')]) {
                sh "chmod +x jenkins/scripts/status.sh && jenkins/scripts/status.sh 'SUCCESSFUL' ${JOB_NAME} ${BUILD_TAG} "
            }
        }
		failure {
            script {
                if (env.BRANCH_NAME ==~ '(develop|release/.*)') {
                   chat 'AAAAvnc5o90'
                }
            }

            withCredentials([usernamePassword(credentialsId: 'bitbucket-m2m', passwordVariable: 'BITBUCKET_PASSWORD', usernameVariable: 'BITBUCKET_USER')]) {
                sh "chmod +x jenkins/scripts/status.sh && jenkins/scripts/status.sh 'FAILED' ${JOB_NAME} ${BUILD_TAG} "
            }
        }
        always {
            cleanWs()
        }	
    }
}