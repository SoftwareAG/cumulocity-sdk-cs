using Cumulocity.SDK.Client.Rest.Model.Idtype;
using Cumulocity.SDK.Client.Rest.Representation.Measurement;
using System;
using System.Threading.Tasks;

namespace Cumulocity.SDK.Client.Rest.API.Measurement
{
	public interface IMeasurementApi
	{
		/// <summary>
		/// Gets measurement by id
		/// </summary>
		/// <param name="gid"> id of the measurement to search for </param>
		/// <returns> the measurement with the given id </returns>
		/// <exception cref="SDKException"> if the measurement is not found or if the query failed </exception>
		MeasurementRepresentation GetMeasurement(GId gid);

		/// <summary>
		/// Creates measurement in the platform. The id of the measurement must not be Set, since it will be generated by the platform
		/// </summary>
		/// <param name="measurement"> measurement to be created </param>
		/// <returns> the created measurement with the generated id </returns>
		/// <exception cref="SDKException"> if the measurement could not be created </exception>
		MeasurementRepresentation Create(MeasurementRepresentation measurement);

		/// <summary>
		/// Creates measurement in the platform. Does not send Accept header to make the request be processed faster.
		/// </summary>
		/// <param name="measurement"> measurement to be created </param>
		/// <exception cref="SDKException"> if the measurement could not be created </exception>
		void CreateWithoutResponse(MeasurementRepresentation measurement);

		/// <summary>
		/// Creates measurements in the platform. The id of the measurements must not be Set, since it will be generated by the platform
		/// </summary>
		/// <param name="measurementCollection"> measurements to be created </param>
		/// <returns> the created measurements with their generated ids </returns>
		/// <exception cref="SDKException"> if the measurements could not be created </exception>
		MeasurementCollectionRepresentation CreateBulk(MeasurementCollectionRepresentation measurementCollection);

		/// <summary>
		/// Creates measurements in the platform. Does not send Accept header to make the request be processed faster.
		/// </summary>
		/// <param name="measurementCollection"> measurements to be created </param>
		/// <exception cref="SDKException"> if the measurements could not be created </exception>
		void CreateBulkWithoutResponse(MeasurementCollectionRepresentation measurementCollection);

		/// <summary>
		/// Creates measurement in the platform. Immediate response is available through the Future object.
		/// In case of lost connection, buffers data in persistence provider.
		/// </summary>
		/// <param name="measurement"> measurement to be created </param>
		/// <returns> the created measurement with the generated id </returns>
		/// <exception cref="SDKException"> if the measurement could not be created </exception>
		Task<MeasurementRepresentation> CreateAsync(MeasurementRepresentation measurement);

		/// <summary>
		/// Deletes measurement from the platform.
		/// The measurement to be deleted is identified by the id within the given measurement.
		/// </summary>
		/// <param name="measurement"> to be deleted </param>
		/// <exception cref="SDKException"> if the measurement could not be deleted </exception>
		void Delete(MeasurementRepresentation measurement);

		/// <summary>
		/// Delete measurements from the platform based on the specified filter
		/// </summary>
		/// <param name="filter"> the filter criteria(s) </param>
		/// <exception cref="IllegalArgumentException"> </exception>
		/// <exception cref="SDKException"> if the query failed </exception>
		void DeleteMeasurementsByFilter(MeasurementFilter filter);

		/// <summary>
		/// Gets the all the measurement in the platform
		/// </summary>
		/// <returns> collection of measurements with paging functionality </returns>
		/// <exception cref="SDKException"> if the query failed </exception>
		IMeasurementCollection Measurements { get; }

		/// <summary>
		/// Gets the measurements from the platform based on specified filter
		/// </summary>
		/// <param name="filter"> the filter criteria(s) </param>
		/// <returns> collection of measurements matched by the filter with paging functionality </returns>
		/// <exception cref="SDKException"> if the query failed </exception>
		IMeasurementCollection GetMeasurementsByFilter(MeasurementFilter filter);

		/// <summary>
		/// Deletes measurement from the platform.
		/// The measurement to be deleted is identified by the id within the given measurement.
		/// </summary>
		/// <param name="measurement"> to be deleted </param>
		/// <exception cref="SDKException"> if the measurement could not be deleted </exception>
		[Obsolete]
		void DeleteMeasurement(MeasurementRepresentation measurement);
	}
}