pipeline {
    agent {
        dockerfile {
            dir 'jenkins/build'
            args '-v /var/lib/jenkins/.mono:/root/.mono -v /var/lib/jenkins/.microsoft/:/root/.microsoft'
        }
    }
	triggers { pollSCM('H/5 * * * *') }
    options{
     buildDiscarder(logRotator(numToKeepStr: '10'))
     timeout(time: 1, unit: 'HOURS')
     disableConcurrentBuilds()
    }
	parameters {
        booleanParam(defaultValue: true, description: '', name: 'DIAGNOSTIC_FLAG')
		booleanParam(defaultValue: false, description: '', name: 'CAN_RELEASE')
    }
    environment {
        CI = 'true'
    }
    stages {
        stage('Build') {
		    
			when {
                anyOf{
				    branch 'master'
                    branch 'develop'
                    branch 'feature/**'
                }
            }
            steps {
			    
				script {
					sh ' apt-get install -y dos2unix'
                    sh ' dos2unix ./MQTT-SDK/build.sh && apt-get --purge remove -y dos2unix && rm -rf /var/lib/apt/lists/*'
				    if ("${params.CAN_RELEASE}" == "true" && env.BRANCH_NAME == "develop") {
												    
								sshagent (['jenkins-hg-key']) {
								sh '''#!/bin/bash								
								chmod +x ./MQTT-SDK/build.sh							
								pwd
								./MQTT-SDK/build.sh --script build-release.cake
								'''
								}
					}
					else{
						if ("${params.DIAGNOSTIC_FLAG}" == "true") {
							echo "diagnostic flag: ${params.DIAGNOSTIC_FLAG}"
							sh 'cd ./MQTT-SDK && chmod +x ./build.sh && pwd && ./build.sh -target=Test -verbosity=diagnostic && cd ..'
							sh 'cd ./REST-SDK/test/Cumulocity.SDK.Client.IntegrationTest  && dotnet restore && dotnet build && dotnet test --filter EventIT && dotnet test --filter AlarmIT && dotnet test --filter MeasurementIT && dotnet test --filter UserIT && dotnet test --filter InventoryTests &&  dotnet test --filter CepApiIT && dotnet test --filter IdentityIT && dotnet test --filter TenantOptionIT && cd ..'
						}else
						{
							echo "diagnostic flag: ${params.DIAGNOSTIC_FLAG}"
							sh 'cd ./MQTT-SDK && chmod +x ./build.sh && pwd && ./build.sh -target=Test && cd ..'
							sh 'cd ./REST-SDK/test/Cumulocity.SDK.Client.IntegrationTest && dotnet test --filter EventIT && dotnet test --filter AlarmIT && dotnet test --filter MeasurementIT && dotnet test --filter UserIT  && dotnet test --filter InventoryTests && dotnet test --filter TenantOptionIT'							
							sh 'cd ..'
						}
					}
                }
            }
        } 
		stage('Deliver for development') {
            when {
                branch 'development'
            }
            steps {
				sh 'echo DevelopmentBranch'
            }
        }
        stage('Release') {
            when {
                branch "release/*"
            }
            steps {
				script {
                    if ("${params.DIAGNOSTIC_FLAG}" == "true" && ("${params.CAN_RELEASE}" == "true")) {
					    sh 'echo Release Branch'
						
						echo "Release Branch"
							    
						sshagent (['jenkins-hg-key']) {
						sh '''#!/bin/bash
						chmod +x ./MQTT-SDK/build.sh						
						pwd
						./MQTT-SDK/build.sh --script build-release.cake -verbosity=diagnostic
						'''
						}
							
                    }else if ("${params.CAN_RELEASE}" == "true")
					{
							echo "Release Branch"
							    
							sshagent (['jenkins-hg-key']) {
							sh '''#!/bin/bash
							whoami
							chmod +x ./MQTT-SDK/build.sh
							./MQTT-SDK/build.sh --script build-release.cake
							'''
							}
					} else {
					    sh 'echo Release Branch'
						echo "CAN_RELEASE: ${params.CAN_RELEASE}"
					}
                }
            }
        }	
    }
	
    post {
        always {
            withCredentials([file(credentialsId: 'maven-settings', variable: 'MVN_SETTINGS')]) {
                sh "chmod +x .jenkins/scripts/clean.sh && .jenkins/scripts/clean.sh"
            }
        }
        success {
            withCredentials([usernamePassword(credentialsId: 'bitbucket-m2m', passwordVariable: 'BITBUCKET_PASSWORD', usernameVariable: 'BITBUCKET_USER')]) {
                sh "chmod +x .jenkins/scripts/status.sh && .jenkins/scripts/status.sh 'SUCCESSFUL' ${JOB_NAME} ${BUILD_TAG} "
            }
        }
        failure {
            script {
                if (env.BRANCH_NAME ==~ '(develop|release/.*)') {
                    chat 'AAAAvnc5o90'
                }
            }

            withCredentials([usernamePassword(credentialsId: 'bitbucket-m2m', passwordVariable: 'BITBUCKET_PASSWORD', usernameVariable: 'BITBUCKET_USER')]) {
                sh "chmod +x .jenkins/scripts/status.sh && .jenkins/scripts/status.sh 'FAILED' ${JOB_NAME} ${BUILD_TAG} "
            }
        }
		always { 
			sh 'echo cleanWs'
			/*deleteDir()  clean up our workspace */
			/* Testing Comment */
			}
    }